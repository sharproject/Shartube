interface CreateComicSession {
  name: String!
  description: String
  comicID: [String!]!
  thumbnail: String
}

input CreateComicSessionInput {
  name: String!
  description: String
  comicID: [String!]!
  thumbnail: Boolean
}

type CreateComicSessionInputModel implements CreateComicSession {
  name: String!
  description: String
  CreatedByID: String!
  comicID: [String!]!
  thumbnail: String
  views: Int!
}

type ComicSession implements CreateComicSession {
  _id: ID!
  createdAt: Time!
  updatedAt: Time!
  CreatedByID: String!
  name: String!
  description: String
  comicID: [String!]!
  Comic: [Comic!]! @goField(forceResolver: true)
  Chaps: [Chap!] @goField(forceResolver: true)
  ChapIds: [String!]
  thumbnail: String
  views: Int!
}

input UpdateComicSessionInput {
  name: String
  description: String
  thumbnail: Boolean
}

type UpdateComicSessionInputModel {
  name: String
  description: String
  thumbnail: String
}

type CreateComicSessionResponse {
  ComicSession: ComicSession!
  UploadToken: String
}

type UpdateComicSessionResponse {
  ComicSession: ComicSession!
  UploadToken: String
}

extend type Mutation {
  CreateComicSession(
    input: CreateComicSessionInput!
  ): CreateComicSessionResponse! @goField(forceResolver: true) @auth
  updateComicSession(
    sessionID: String!
    input: UpdateComicSessionInput
  ): UpdateComicSessionResponse! @goField(forceResolver: true) @auth
  DeleteComicSession(sessionID: String!): DeleteResult!
    @goField(forceResolver: true)
    @auth
}

extend type Query {
  SessionByComic(comicID: String!): [ComicSession!]
    @goField(forceResolver: true)
  SessionByID(ID: String!): ComicSession @goField(forceResolver: true)
}
