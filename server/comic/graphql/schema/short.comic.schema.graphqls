interface CreateShortComic {
  name: String!
  description: String
  thumbnail: String
  background: String
}

input CreateShortComicInput {
  name: String!
  description: String
  thumbnail: Boolean
  background: Boolean
}

type CreateShortComicInputModel implements CreateShortComic {
  name: String!
  description: String
  CreatedByID: String!
  thumbnail: String
  background: String
  views: Int!
}

type ShortComic implements CreateShortComic {
  _id: ID!
  createdAt: Time!
  updatedAt: Time!
  CreatedByID: String!
  name: String!
  description: String
  ChapIDs: [String!]!
  Chap: [Chap!] @goField(forceResolver: true)
  thumbnail: String
  background: String
  views: Int!
}

input UpdateShortComicInput {
  name: String
  description: String
  thumbnail: Boolean
  background: Boolean
}

type UpdateShortComicInputModel {
  name: String
  description: String
  thumbnail: String
  background: [String]
}

type CreateShortComicResponse {
  ShortComic: ShortComic!
  UploadToken: [String!]
}

type UpdateShortComicResponse {
  ShortComic: ShortComic!
  UploadToken: [String!]
}

extend type Mutation {
  createShortComic(input: CreateShortComicInput!): CreateShortComicResponse!
    @goField(forceResolver: true)
    @auth
  updateShortComic(
    ShortComicID: String!
    input: UpdateShortComicInput!
  ): UpdateShortComicResponse! @goField(forceResolver: true) @auth
  DeleteShortComic(ShortComicID: String!): DeleteResult!
    @goField(forceResolver: true)
    @auth
}
extend type Query {
  ShortComics: [ShortComic!]! @goField(forceResolver: true)
  TopViewShortComics: [ShortComic!]! @goField(forceResolver: true)
  ShortComicByID(id: String!): ShortComic @goField(forceResolver: true)
}
