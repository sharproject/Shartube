interface CreateChap {
  name: String!
  description: String
  SessionID: String
  ShortComicID: String
}
input CreateChapInput {
  name: String!
  description: String
  SessionID: String
  ShortComicID: String
}
type CreateChapInputModel implements CreateChap {
  name: String!
  description: String
  CreatedByID: String!
  SessionID: String
  ShortComicID: String
  views: Int!
}
type ImageResult {
  ID: String!
  Url: String!
}
type Chap implements CreateChap @key(fields: "_id") {
  _id: ID!
  createdAt: Time!
  updatedAt: Time!
  CreatedByID: String!
  name: String!
  description: String
  SessionID: String
  ShortComicID: String
  Session: ComicSession @goField(forceResolver: true)
  ShortComic: ShortComic @goField(forceResolver: true)
  Images: [ImageResult!]!
  views: Int!
}

input UpdateChapInput {
  name: String
  description: String
}
extend type Mutation {
  CreateChap(input: CreateChapInput!): Chap! @goField(forceResolver: true) @auth
  AddImageToChap(chapID: String!): String @goField(forceResolver: true) @auth
  UpdateChap(chapID: String!, input: UpdateChapInput!): Chap!
    @goField(forceResolver: true)
    @auth
  DeleteChap(chapID: String!): DeleteResult! @goField(forceResolver: true) @auth
  DeleteChapImage(chapID: String!, imageID: [String!]!): Chap!
    @goField(forceResolver: true)
    @auth
}

extend type Query {
  ChapBySession(SessionID: String!): [Chap!] @goField(forceResolver: true)
  ChapByID(ID: String!): Chap @goField(forceResolver: true)
}
